#!/usr/bin/env ruby
require 'rubygems'
require 'gli'
include GLI::App

require 'thor'

require 'fusegen'
require 'pp'

# dev mode run: bundle exec bin/fusegen

program_desc 'code generation for JBoss Fuse! (and beyond)

HELP
    fusegen help <command>    - for specific subcommand help'
    
version Fusegen::VERSION



desc 'Debug output'
switch [:debug], { :negatable => false }

desc 'Creates a new project'
arg_name '[project]'
command :new do |c|
   c.desc 'Fuse product version [last 5 digits]'
   c.default_value '60024'
   c.arg_name '[60xxx|61xxx]'
   c.flag [:f,:fuseversion]

   c.desc 'Maven groupId for the project'
   c.default_value 'com.redhat.support'
   c.arg_name '[groupid]'
   c.flag [:g,:groupid]
 
   c.desc 'Maven artifactId for the project'
   c.default_value 'test-project'
   c.arg_name '[artifactid]'
   c.flag [:a,:artifactid]

   c.desc 'Maven packaging for the project'
   c.default_value 'bundle'
   c.arg_name '[bundle|jar|war]'
   c.flag [:p,:packaging]

   c.desc 'Fabric hostname for maven deploy plugin'
   c.default_value 'localhost'
   c.arg_name '[hostname]'
   c.flag [:h,:fabrichost]
    
   c.action do |global_options,options,args|
    
    # As this is a common command we add extra help
    if global_options[:category] == "none"
      puts "NAME"
      puts "    new - Creates a new project"
      puts ""
      puts "SYNOPSIS"
      puts "    fusegen [global options] new [quickstart]"
      puts ""
      puts "EXAMPLE"
      puts "    fusegen -c fuse new camel-base"
      puts ""
      raise "No category provided (use -c <category>). For available categories see 'fusegen quickstart categories'"    
    end
    
    options[:category] = global_options[:category]
    options[:projectversion] = "1.0-SNAPSHOT"
    options[:name] = "my-fusegen-project"
    options[:name] = args[0] unless args.nil?
    
    g = Generator.new
    g.new_project(options)
  
  end
end




desc 'Manage quickstarts'
command [:qs,:quickstarts] do |c|
  
    c.desc "List available quickstart project templates"
    c.command :list do |list|
        list.action do |global_options,options,args|
          
          g = Generator.new
          g.qs_list(global_options,options,args)             
        end
    end
    

    c.desc "Show quickstart info for a project template"
    c.arg_name '<name>'
    c.command :info do |info|
         info.action do |global_options,options,args|
           # Validate input
            if args.nil? || args.length == 0
              puts "No quickstart name provided.."
              help_now!
            else
               g = Generator.new
               g.qs_info(options,args)  
            end
         end
    end
end

desc 'Manage quickstart repositories'
command :repo do |c|

    c.desc "Add a local or git quickstart repo"
    c.arg_name '<path>'
    c.command [:add] do |addrepo|
      addrepo.action do |global_options,options,args|
        if args.nil? || args.length == 0 then
            puts "No path to repository provided."
            help_now!
        else
            g = Generator.new
            g.repo_add(global_options,options,args)  
        end
      end
    end
    
    c.desc "Remove a local or git quickstart repo"
    c.command [:rm] do |rm|
        rm.action do |global_options,options,args|
          # Validate input
          # Save the repo to local config
          if args.nil? || args.length == 0
              puts "No repository identifier provided."
              help_now!
          else
               g = Generator.new
               g.repo_rm(global_options,options,args)  
          end
        end
    end
    
    c.desc "List available quickstart repos"
    c.command [:list] do |list|
        list.action do |global_options,options,args|
          g = Generator.new
          g.repo_list(global_options,options,args)  
      
        end
    end
  

    
end 



desc 'Append to an existing project'
command :add do |c|
    
    g = Generator.new   
     
    c.desc "Add a karaf features file to a project"
    c.command [:feature] do |feature|
        feature.action do |global_options,options,args|
            g.add_feature
        end
    end
    
    c.desc "Add an index.yml to a fusegen template repository"
    c.command [:index] do |index|
        index.action do |global_options,options,args|
            g.add_index 
        end
    end
    
    c.desc "Add an Readme.md to a project"
    c.command [:readme] do |readme|
        readme.action do |global_options,options,args|
            g.add_readme
        end
    end
    
    # Other possible add
    # Add a fabric deploy script
    # Add a profile to a maven pom?
end



pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)

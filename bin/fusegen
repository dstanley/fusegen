#!/usr/bin/env ruby
require 'rubygems'
require 'gli'
include GLI::App

require 'thor'

require 'fusegen'
require 'pp'

# dev mode run: bundle exec bin/fusegen

program_desc 'Code Generation for JBoss Fuse!'

version Fusegen::VERSION


desc 'Fuse product version [last 5 digits]'
default_value '60024'
arg_name '[60xxx|61xxx]'
flag [:f,:fuseversion]

desc 'Maven groupId for the project'
default_value 'com.redhat.support'
arg_name '[groupid]'
flag [:g,:groupid]

desc 'Maven artifactId for the project'
default_value 'test-project'
arg_name '[artifactid]'
flag [:a,:artifactid]

desc 'Maven packaging for the project'
default_value 'bundle'
arg_name '[bundle|jar|war]'
flag [:p,:packaging]

desc 'Fabric hostname for maven deploy plugin'
default_value 'localhost'
arg_name '[hostname]'
flag [:h,:fabrichost]


desc 'Create a boostrap config file that can be used to generate more complex projects'
arg_name ''
command :config do |c|
  #c.desc 'Describe a switch to new'
  #c.switch :s

  c.desc 'Path to config file'
  c.default_value './config.yml'
  c.arg_name '[configfile]'
  c.flag [:f,:filename]
  
  
  c.action do |global_options,options,args|

    # Your command logic here
     
    # If you have any errors, just raise them
    # raise "that command made no sense"

    puts "new command ran"
  end
end

desc 'Creates a new JBoss Fuse project'
arg_name '[project]'
command :fuse do |c|

  c.action do |global_options,options,args|

    # Your command logic here
     
    global_options[:cmd] = "fuse"
    global_options[:projectversion] = "1.0-SNAPSHOT"
    global_options[:name] = "JBoss Fuse Project"
    global_options[:name] = args[0] unless args.nil?
    
    
    g = Generator.new
    g.generate(global_options,options,args)
    

    puts "new fuse project"
  end
end


desc 'Creates a new JBoss A-MQ project'
arg_name '[project]'
command :amq do |c|

  c.action do |global_options,options,args|

    c.desc 'Project template'
    c.default_value 'default'
    c.arg_name '[template]'
    c.flag [:t,:template]

    global_options[:cmd] = "amq"
    g = Generator.new
    g.generate(global_options,options,args)
    
  end
end


desc 'List available pre-canned project templates'
arg_name ''
command :list do |c|

  c.action do |global_options,options,args|

    # Your command logic here
     
    # If you have any errors, just raise them
    # raise "that command made no sense"
    global_options[:cmd] = "amq"

    puts "List project templates"
  end
end



pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
